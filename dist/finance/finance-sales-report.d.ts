import { DigitalInvoice } from "../business-invoice";
import { LegalEntity } from "../types-business";
import { IncomeTaxType, QuarterPeriod } from "./enums-finance";
import { Money } from "./finance-money";
import { DiscountSummary } from "./types-finance";
export declare enum ReportStatus {
    /** Draft state, not yet finalized */
    DRAFT = "Draft",
    /** Approved by internal team or system */
    APPROVED = "Approved",
    /** Officially filed to BIR or governing body */
    FILED = "Filed",
    /** Archived for record-keeping, no longer active */
    ARCHIVED = "Archived",
    /** Invalidated due to error, duplication, or cancellation */
    VOID = "Void"
}
export interface TaxPayables {
    vat: Money;
    percentageTax: Money;
    withholdingTax: Money;
    incomeTax: Money;
}
/**
 * Aggregated totals for the reporting period (centavo precision via Money).
 */
export interface SummaryTotals {
    /** Gross sales for the period (usually VAT-inclusive if VAT‐registered) */
    sales: Money;
    /** Aggregated discount breakdown (SC/PWD, promos, etc.) */
    discounts: DiscountSummary;
    /** Sales returns or allowances (negative amounts) */
    returns: Money;
    /**
     * Taxable sales base:
     *   - VAT entity: salesVATable
     *   - Non-VAT entity: grossSales less discounts & returns
     */
    taxableSales: Money;
    /** Taxes due for the period (output VAT *or* percentage tax, plus WHT & income tax) */
    tax: TaxPayables;
    /**
     * Net sales (revenue after pulling out pass-through output-VAT *or*
     * after deducting percentage-tax expense).
     */
    netSales: Money;
    /**
     * Net income after:
     *   netSales – incomeTax
     * (Withholding tax is a credit, not an expense, so it is NOT subtracted here.)
     */
    netIncome: Money;
}
export interface InvoiceBreakdownItem {
    id: string;
    number: string;
    timestamp: string;
}
export interface ReportMetadata {
    /** Legal business name */
    companyName: string;
    /** Inclusive period start (ISO 8601 date) */
    periodStart: string;
    /** Inclusive period end (ISO 8601 date) */
    periodEnd: string;
    /** Quarter period (Q1–Q4) */
    quarter: QuarterPeriod;
    year: number;
    /** Currency code, e.g., "PHP" */
    currency: string;
    /** When the report was generated (ISO 8601 timestamp) */
    generatedAt: string;
    /** Username / system that generated the report */
    generatedBy: string;
    /** Semantic version of the report schema, useful for migrations */
    version: string;
    /** Number of invoices aggregated */
    invoiceCount: number;
    /** Income tax scheme applied by the business */
    incomeTaxType: IncomeTaxType;
    /** Username of the user that approved the report */
    approvedBy?: string;
    /** When the report was approved (ISO 8601 timestamp) */
    approvedAt?: string;
}
/**
 * Sales Summary Report class for aggregating invoice summaries and financial totals.
 * Links only basic invoice metadata for scalability.
 */
export declare class SalesSummaryReport {
    #private;
    /** Unique identifier for the sales report */
    id: string;
    /** Report metadata including company name, period, currency, and generator info */
    metadata: ReportMetadata;
    /** Financial summary of all aggregated invoices for the report period */
    totals: SummaryTotals;
    /** Minimal invoice references bound to this report */
    invoices: InvoiceBreakdownItem[];
    /** ID of the user or account that owns or created this report */
    userID: string;
    /** Current report status (Draft, Approved, Filed, Archived, Void) */
    status: ReportStatus;
    /** Timestamp when this summary object was created */
    timestamp: string;
    /**
    * Creates a new SalesSummaryReport instance.
    *
    * @param id - Optional unique identifier for the sales report. If not provided, a slug-based ID is autogenerated.
    * @param metadata - Report metadata including company name, period, currency, and generator info.
    * @param totals - Financial summary of all aggregated invoices for the report period.
    * @param invoices - Minimal invoice references (IDs, numbers, timestamps) included in the summary.
    * @param userID - ID of the user or account that owns or created this report. Defaults to `"public-user"` if not provided.
    * @param status - Current report status (Draft, Approved, Filed, Archived, Void). Defaults to `ReportStatus.DRAFT`.
    * @param timestamp - Creation timestamp of the report (ISO 8601). Defaults to the current datetime.
    */
    constructor(id?: string, metadata?: ReportMetadata, totals?: SummaryTotals, invoices?: InvoiceBreakdownItem[], userID?: string, status?: ReportStatus, timestamp?: string);
    /**
    * Initializes and creates a new `SalesSummaryReport` with default and null values.
    * @param taxpayer - Information about the Taxpayer including name, registered TIN, and business name.
    * @returns A new `SalesSummaryReport` instance.
    */
    static initialize(taxpayer: LegalEntity, userID: string, quarter?: QuarterPeriod, year?: number, incomeTaxType?: IncomeTaxType): SalesSummaryReport;
    /**
      * Sets the company name for the report.
      * @param name - Company name (non-empty string).
      * @returns The updated instance.
      */
    setCompanyName(name: string): this;
    /**
     * Sets the quarter period of the report.
     * @param quarter - Must be a valid QuarterPeriod enum value.
     * @returns The updated instance.
     */
    setQuarter(quarter: QuarterPeriod): this;
    /**
     * Sets the currency for the report.
     * @param currency - Must be a valid non-empty string (e.g., "PHP", "USD").
     * @returns The updated instance.
     */
    setCurrency(currency: string): this;
    /**
     * Sets the income tax type.
     * @param taxType - Must be a valid IncomeTaxType enum value.
     * @returns The updated instance.
     */
    setIncomeTaxType(taxType: IncomeTaxType): this;
    /**
     * Sets the start period of the report.
     * @param dateStr - Must be a valid ISO date string.
     * @returns The updated instance.
     */
    setPeriodStart(dateStr: string): this;
    /**
     * Sets the end period of the report.
     * @param dateStr - Must be a valid ISO date string.
     * @returns The updated instance.
     */
    setPeriodEnd(dateStr: string): this;
    /**
     * Approves the report and sets the approver's name.
     * @param approver - Must be a valid non-empty string.
     * @returns The updated instance.
     */
    approveReport(approver: string): this;
    /**
     * Files the report. Only allowed if report has been approved.
     * @returns The updated instance.
     */
    fileReport(): this;
    /**
     * Archives the report.
     * @returns The updated instance.
     */
    archiveReport(): this;
    /**
     * Voids the report. Cannot void a report that is already voided.
     * @returns The updated instance.
     */
    voidReport(): this;
    /**
    * Checks if an invoice with the given ID exists in the report.
    * @param invoiceID - The invoice ID to check.
    * @returns true if the invoice exists, false otherwise.
    */
    doesInvoiceExist(invoiceID: string): boolean;
    /**
    * Clears all existing invoices and resets the breakdown calculations.
    */
    clearInvoices(): this;
    /**
     * Removes an invoice from the report by its invoiceNumber.
     * @param invoiceNumber - The unique invoice number to remove.
     * @returns The updated SalesSummaryReport instance.
     * @throws Error if invoiceNumber is not found, invalid, or the invoice list is empty.
     */
    removeInvoiceByNumber(invoiceNumber: string): this;
    /**
    * Overwrites existing invoices with a new set, resets totals, and recomputes breakdown.
    * @param input - Array of DigitalInvoice objects to replace current invoices.
    * @returns this - For chaining.
    */
    updateInvoices(input: DigitalInvoice[]): this;
    /**
       * Add digital invoices to the report and update computed totals.
       * @param input - Array of DigitalInvoice objects
       */
    addInvoices(input: DigitalInvoice[]): this;
    /**
      * Converts the current `SalesSummaryReport` class to a plain JSON object and automatically generates an ID.
      * @returns {object} - A plain JSON object representation of the `SalesSummaryReport` with an autogenerated ID.
      */
    finalize(approvedBy: string): object;
    /**
    * Converts the current `SalesSummaryReport` object to a plain JavaScript object (JSON).
    * @returns {object} - The plain object representation of the `SalesSummaryReport` instance.
    */
    toJSON(): object;
    /**
    * Static method to parse a JSON string or object into a `SalesSummaryReport` instance.
    *
    * @param json - A JSON string or plain object to be parsed.
    * @returns {SalesSummaryReport} - A new `SalesSummaryReport` instance based on the parsed JSON.
    * @throws Will throw an error if required properties are missing.
    */
    static parseFromJSON(json: string | object): SalesSummaryReport;
}
